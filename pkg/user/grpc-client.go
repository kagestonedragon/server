// Code generated by git.repo.services.lenvendo.ru/grade-factor/go-kit-service-generator  REMOVE THIS STRING ON EDIT OR DO NOT EDIT.
package user

import (
	"context"
	"errors"

	pb "github.com/kagestonedragon/server/internal/echopb"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"
)

// NewGRPCClient returns an Service backed by a gRPC server at the other end
// of the conn. The caller is responsible for constructing the conn, and
// eventually closing the underlying transport. We bake-in certain middlewares,
// implementing the client library pattern.
func NewGRPCClient(conn *grpc.ClientConn, tracer stdopentracing.Tracer, logger log.Logger) Service {
	// global client middlewares
	options := []grpctransport.ClientOption{
		grpctransport.ClientBefore(opentracing.ContextToGRPC(tracer, logger)),
	}

	return endpoints{
		// Each individual endpoint is an grpc/transport.Client (which implements
		// endpoint.Endpoint) that gets wrapped with various middlewares. If you
		// made your own client library, you'd do this work there, so your server
		// could rely on a consistent set of client behavior.
		AddUserEndpoint: grpctransport.NewClient(
			conn,
			"echopb.UserService",
			"AddUser",
			encodeGRPCAddUserRequest,
			decodeGRPCUser,
			pb.User{},
			options...,
		).Endpoint(),
		GetUserListEndpoint: grpctransport.NewClient(
			conn,
			"echopb.UserService",
			"GetUserList",
			encodeGRPCGetUserListRequest,
			decodeGRPCGetUserListResponse,
			pb.GetUserListResponse{},
			options...,
		).Endpoint(),
		UpdateUserEndpoint: grpctransport.NewClient(
			conn,
			"echopb.UserService",
			"UpdateUser",
			encodeGRPCUser,
			decodeGRPCUpdateUserResponse,
			pb.UpdateUserResponse{},
			options...,
		).Endpoint(),
		DeleteUserByIdEndpoint: grpctransport.NewClient(
			conn,
			"echopb.UserService",
			"DeleteUserById",
			encodeGRPCDeleteUserByIdRequest,
			decodeGRPCDeleteUserByIdResponse,
			pb.DeleteUserByIdResponse{},
			options...,
		).Endpoint(),
		GetUserByIdEndpoint: grpctransport.NewClient(
			conn,
			"echopb.UserService",
			"GetUserById",
			encodeGRPCGetUserByIdRequest,
			decodeGRPCUser,
			pb.User{},
			options...,
		).Endpoint(),
	}
}

func encodeGRPCAddUserRequest(_ context.Context, request interface{}) (interface{}, error) {
	inReq, ok := request.(*AddUserRequest)
	if !ok {
		return nil, errors.New("encodeGRPCAddUserRequest wrong request")
	}

	return AddUserRequestToPB(inReq), nil
}

func encodeGRPCDeleteUserByIdRequest(_ context.Context, request interface{}) (interface{}, error) {
	inReq, ok := request.(*DeleteUserByIdRequest)
	if !ok {
		return nil, errors.New("encodeGRPCDeleteUserByIdRequest wrong request")
	}

	return DeleteUserByIdRequestToPB(inReq), nil
}

func encodeGRPCGetUserByIdRequest(_ context.Context, request interface{}) (interface{}, error) {
	inReq, ok := request.(*GetUserByIdRequest)
	if !ok {
		return nil, errors.New("encodeGRPCGetUserByIdRequest wrong request")
	}

	return GetUserByIdRequestToPB(inReq), nil
}

func encodeGRPCGetUserListRequest(_ context.Context, request interface{}) (interface{}, error) {
	inReq, ok := request.(*GetUserListRequest)
	if !ok {
		return nil, errors.New("encodeGRPCGetUserListRequest wrong request")
	}

	return GetUserListRequestToPB(inReq), nil
}

func encodeGRPCUser(_ context.Context, request interface{}) (interface{}, error) {
	inReq, ok := request.(*User)
	if !ok {
		return nil, errors.New("encodeGRPCUser wrong request")
	}

	return UserToPB(inReq), nil
}

func decodeGRPCDeleteUserByIdResponse(_ context.Context, response interface{}) (interface{}, error) {
	inResp, ok := response.(*pb.DeleteUserByIdResponse)
	if !ok {
		return nil, errors.New("decodeGRPCDeleteUserByIdResponse wrong response")
	}

	resp := PBToDeleteUserByIdResponse(inResp)

	return *resp, nil
}

func decodeGRPCGetUserListResponse(_ context.Context, response interface{}) (interface{}, error) {
	inResp, ok := response.(*pb.GetUserListResponse)
	if !ok {
		return nil, errors.New("decodeGRPCGetUserListResponse wrong response")
	}

	resp := PBToGetUserListResponse(inResp)

	return *resp, nil
}

func decodeGRPCUpdateUserResponse(_ context.Context, response interface{}) (interface{}, error) {
	inResp, ok := response.(*pb.UpdateUserResponse)
	if !ok {
		return nil, errors.New("decodeGRPCUpdateUserResponse wrong response")
	}

	resp := PBToUpdateUserResponse(inResp)

	return *resp, nil
}

func decodeGRPCUser(_ context.Context, response interface{}) (interface{}, error) {
	inResp, ok := response.(*pb.User)
	if !ok {
		return nil, errors.New("decodeGRPCUser wrong response")
	}

	resp := PBToUser(inResp)

	return *resp, nil
}
