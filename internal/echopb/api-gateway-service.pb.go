// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: api-gateway-service.proto

package echopb

import (
	context "context"
	_ "github.com/kagestonedragon/annotations_api/service"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_api_gateway_service_proto protoreflect.FileDescriptor

var file_api_gateway_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x63, 0x68,
	0x6f, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x6c, 0x65, 0x6e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2d, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0xe2, 0x2c, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xf7, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x39, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x41,
	0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x65, 0x63,
	0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x12,
	0x4a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x73, 0x70, 0x65, 0x63,
	0x55, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0xc2, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2d,
	0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x8c, 0x02, 0x0a, 0x33, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x42, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64,
	0x41, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x65,
	0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x73, 0x70, 0x65, 0x63, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x12,
	0xa0, 0x02, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x3a, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x6e, 0x12, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x64, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x72,
	0x65, 0x65, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x2b, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12, 0x4c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x7d, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x64, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2d,
	0x74, 0x72, 0x65, 0x65, 0x12, 0xdf, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x37, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x63, 0x68,
	0x6f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x35, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x82, 0x02, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3b, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x42, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x22, 0x4c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x61, 0x72, 0x64, 0x65, 0x2f, 0x7b, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x65, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xcc, 0x01, 0x0a, 0x23,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x32, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xef, 0x01, 0x0a, 0x2c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3b, 0x2e, 0x65, 0x63,
	0x68, 0x6f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x22, 0x39,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xdf, 0x01, 0x0a,
	0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x37, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3a, 0x1a, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xcc,
	0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x63, 0x68,
	0x6f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x1a, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xef, 0x01,
	0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3b,
	0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x65, 0x63,
	0x68, 0x6f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3e, 0x1a, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f,
	0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xdf, 0x01, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x37, 0x2e, 0x65,
	0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x2a, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0xcc, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x2a, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0xef, 0x01, 0x0a, 0x2c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x3b, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3e, 0x2a, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0xf0, 0x01, 0x0a, 0x2c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x3b, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x42, 0x79, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x2a, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x72,
	0x65, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xb9, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x43, 0x61, 0x72, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x24, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x43, 0x61, 0x72, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x43, 0x61, 0x72, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4d, 0x12, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x2d, 0x63, 0x61, 0x72, 0x64, 0x3a, 0x01,
	0x2a, 0x12, 0x6d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x19, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x63, 0x68,
	0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x61, 0x6c, 0x6c,
	0x12, 0x99, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x73, 0x12, 0x21, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x65, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12,
	0x88, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x2d, 0x74, 0x72, 0x65, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x63, 0x68,
	0x6f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x72,
	0x65, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x73, 0x12,
	0x24, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x65, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0xba, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x63, 0x68,
	0x6f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x65, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x1d, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x65, 0x65,
	0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x81, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65,
	0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x75,
	0x75, 0x69, 0x64, 0x7d, 0x12, 0x74, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x74, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x1a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x74, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a,
	0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x11, 0x5a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var file_api_gateway_service_proto_goTypes = []interface{}{
	(*GetGradeByCompanyUuidAndSpecializationUuidRequest)(nil),           // 0: echopb.GetGradeByCompanyUuidAndSpecializationUuidRequest
	(*GetSpecializationByCompanyUuidRequest)(nil),                       // 1: echopb.GetSpecializationByCompanyUuidRequest
	(*GetSpecializationByCompanyUuidAndSpecializationUuidRequest)(nil),  // 2: echopb.GetSpecializationByCompanyUuidAndSpecializationUuidRequest
	(*GetCompetenceByCompanyUuidAndCompetenceTreeRequest)(nil),          // 3: echopb.GetCompetenceByCompanyUuidAndCompetenceTreeRequest
	(*GetGradeSystemCompetenceTreeRequest)(nil),                         // 4: echopb.GetGradeSystemCompetenceTreeRequest
	(*CreateGradeSystemCompetenceByCompanyUuidRequest)(nil),             // 5: echopb.CreateGradeSystemCompetenceByCompanyUuidRequest
	(*CreateGradeSystemCompetenceTreeByCompanyUuidRequest)(nil),         // 6: echopb.CreateGradeSystemCompetenceTreeByCompanyUuidRequest
	(*CreateGradeSystemGradeByCompanyUuidRequest)(nil),                  // 7: echopb.CreateGradeSystemGradeByCompanyUuidRequest
	(*CreateGradeSystemSpecializationByCompanyUuidRequest)(nil),         // 8: echopb.CreateGradeSystemSpecializationByCompanyUuidRequest
	(*UpdateGradeSystemCompetenceByCompanyUuidRequest)(nil),             // 9: echopb.UpdateGradeSystemCompetenceByCompanyUuidRequest
	(*UpdateGradeSystemGradeByCompanyUuidRequest)(nil),                  // 10: echopb.UpdateGradeSystemGradeByCompanyUuidRequest
	(*UpdateGradeSystemSpecializationByCompanyUuidRequest)(nil),         // 11: echopb.UpdateGradeSystemSpecializationByCompanyUuidRequest
	(*DeleteGradeSystemCompetenceByCompanyUuidRequest)(nil),             // 12: echopb.DeleteGradeSystemCompetenceByCompanyUuidRequest
	(*DeleteGradeSystemGradeByCompanyUuidRequest)(nil),                  // 13: echopb.DeleteGradeSystemGradeByCompanyUuidRequest
	(*DeleteGradeSystemSpecializationByCompanyUuidRequest)(nil),         // 14: echopb.DeleteGradeSystemSpecializationByCompanyUuidRequest
	(*DeleteGradeSystemCompetenceTreeByCompanyUuidRequest)(nil),         // 15: echopb.DeleteGradeSystemCompetenceTreeByCompanyUuidRequest
	(*GetEmployeeCardByUserRequest)(nil),                                // 16: echopb.GetEmployeeCardByUserRequest
	(*GetCompanyRequest)(nil),                                           // 17: echopb.GetCompanyRequest
	(*GetCompanyByUserUuidRequest)(nil),                                 // 18: echopb.GetCompanyByUserUuidRequest
	(*GetCompetenceTreesRequest)(nil),                                   // 19: echopb.GetCompetenceTreesRequest
	(*GetCompetenceTreeByUuidRequest)(nil),                              // 20: echopb.GetCompetenceTreeByUuidRequest
	(*CreateCompetenceTreesRequest)(nil),                                // 21: echopb.CreateCompetenceTreesRequest
	(*UpdateCompetenceTreesRequest)(nil),                                // 22: echopb.UpdateCompetenceTreesRequest
	(*DeleteCompetenceTreesRequest)(nil),                                // 23: echopb.DeleteCompetenceTreesRequest
	(*DeleteCompetenceTreeAndCompetencesRequest)(nil),                   // 24: echopb.DeleteCompetenceTreeAndCompetencesRequest
	(*GetCompetencesRequest)(nil),                                       // 25: echopb.GetCompetencesRequest
	(*GetCompetenceByUuidRequest)(nil),                                  // 26: echopb.GetCompetenceByUuidRequest
	(*CreateCompetenceRequest)(nil),                                     // 27: echopb.CreateCompetenceRequest
	(*UpdateCompetenceRequest)(nil),                                     // 28: echopb.UpdateCompetenceRequest
	(*DeleteCompetenceRequest)(nil),                                     // 29: echopb.DeleteCompetenceRequest
	(*GetGradeByCompanyUuidAndSpecializationUuidResponse)(nil),          // 30: echopb.GetGradeByCompanyUuidAndSpecializationUuidResponse
	(*GetSpecializationByCompanyUuidResponse)(nil),                      // 31: echopb.GetSpecializationByCompanyUuidResponse
	(*GetSpecializationByCompanyUuidAndSpecializationUuidResponse)(nil), // 32: echopb.GetSpecializationByCompanyUuidAndSpecializationUuidResponse
	(*GetCompetenceByCompanyUuidAndCompetenceTreeResponse)(nil),         // 33: echopb.GetCompetenceByCompanyUuidAndCompetenceTreeResponse
	(*GetGradeSystemCompetenceTreeResponse)(nil),                        // 34: echopb.GetGradeSystemCompetenceTreeResponse
	(*CreateGradeSystemCompetenceByCompanyUuidResponse)(nil),            // 35: echopb.CreateGradeSystemCompetenceByCompanyUuidResponse
	(*CreateGradeSystemCompetenceTreeByCompanyUuidResponse)(nil),        // 36: echopb.CreateGradeSystemCompetenceTreeByCompanyUuidResponse
	(*CreateGradeSystemGradeByCompanyUuidResponse)(nil),                 // 37: echopb.CreateGradeSystemGradeByCompanyUuidResponse
	(*CreateGradeSystemSpecializationByCompanyUuidResponse)(nil),        // 38: echopb.CreateGradeSystemSpecializationByCompanyUuidResponse
	(*UpdateGradeSystemCompetenceByCompanyUuidResponse)(nil),            // 39: echopb.UpdateGradeSystemCompetenceByCompanyUuidResponse
	(*UpdateGradeSystemGradeByCompanyUuidResponse)(nil),                 // 40: echopb.UpdateGradeSystemGradeByCompanyUuidResponse
	(*UpdateGradeSystemSpecializationByCompanyUuidResponse)(nil),        // 41: echopb.UpdateGradeSystemSpecializationByCompanyUuidResponse
	(*DeleteGradeSystemCompetenceByCompanyUuidResponse)(nil),            // 42: echopb.DeleteGradeSystemCompetenceByCompanyUuidResponse
	(*DeleteGradeSystemGradeByCompanyUuidResponse)(nil),                 // 43: echopb.DeleteGradeSystemGradeByCompanyUuidResponse
	(*DeleteGradeSystemSpecializationByCompanyUuidResponse)(nil),        // 44: echopb.DeleteGradeSystemSpecializationByCompanyUuidResponse
	(*DeleteGradeSystemCompetenceTreeByCompanyUuidResponse)(nil),        // 45: echopb.DeleteGradeSystemCompetenceTreeByCompanyUuidResponse
	(*GetEmployeeCardByUserResponse)(nil),                               // 46: echopb.GetEmployeeCardByUserResponse
	(*GetCompanyResponse)(nil),                                          // 47: echopb.GetCompanyResponse
	(*GetCompanyByUserUuidResponse)(nil),                                // 48: echopb.GetCompanyByUserUuidResponse
	(*GetCompetenceTreesResponse)(nil),                                  // 49: echopb.GetCompetenceTreesResponse
	(*GetCompetenceTreeByUuidResponse)(nil),                             // 50: echopb.GetCompetenceTreeByUuidResponse
	(*CreateCompetenceTreesResponse)(nil),                               // 51: echopb.CreateCompetenceTreesResponse
	(*UpdateCompetenceTreesResponse)(nil),                               // 52: echopb.UpdateCompetenceTreesResponse
	(*DeleteCompetenceTreesResponse)(nil),                               // 53: echopb.DeleteCompetenceTreesResponse
	(*DeleteCompetenceTreeAndCompetencesResponse)(nil),                  // 54: echopb.DeleteCompetenceTreeAndCompetencesResponse
	(*GetCompetencesResponse)(nil),                                      // 55: echopb.GetCompetencesResponse
	(*GetCompetenceByUuidResponse)(nil),                                 // 56: echopb.GetCompetenceByUuidResponse
	(*CreateCompetenceResponse)(nil),                                    // 57: echopb.CreateCompetenceResponse
	(*UpdateCompetenceResponse)(nil),                                    // 58: echopb.UpdateCompetenceResponse
	(*DeleteCompetenceResponse)(nil),                                    // 59: echopb.DeleteCompetenceResponse
}
var file_api_gateway_service_proto_depIdxs = []int32{
	0,  // 0: echopb.GateService.GetGradeByCompanyUuidAndSpecializationUuid:input_type -> echopb.GetGradeByCompanyUuidAndSpecializationUuidRequest
	1,  // 1: echopb.GateService.GetSpecializationByCompanyUuid:input_type -> echopb.GetSpecializationByCompanyUuidRequest
	2,  // 2: echopb.GateService.GetSpecializationByCompanyUuidAndSpecializationUuid:input_type -> echopb.GetSpecializationByCompanyUuidAndSpecializationUuidRequest
	3,  // 3: echopb.GateService.GetCompetenceByCompanyUuidAndCompetenceTreeUuid:input_type -> echopb.GetCompetenceByCompanyUuidAndCompetenceTreeRequest
	4,  // 4: echopb.GateService.GetGradeSystemCompetenceTree:input_type -> echopb.GetGradeSystemCompetenceTreeRequest
	5,  // 5: echopb.GateService.CreateGradeSystemCompetenceByCompanyUuid:input_type -> echopb.CreateGradeSystemCompetenceByCompanyUuidRequest
	6,  // 6: echopb.GateService.CreateGradeSystemCompetenceTreeByCompanyUuid:input_type -> echopb.CreateGradeSystemCompetenceTreeByCompanyUuidRequest
	7,  // 7: echopb.GateService.CreateGradeSystemGradeByCompanyUuid:input_type -> echopb.CreateGradeSystemGradeByCompanyUuidRequest
	8,  // 8: echopb.GateService.CreateGradeSystemSpecializationByCompanyUuid:input_type -> echopb.CreateGradeSystemSpecializationByCompanyUuidRequest
	9,  // 9: echopb.GateService.UpdateGradeSystemCompetenceByCompanyUuid:input_type -> echopb.UpdateGradeSystemCompetenceByCompanyUuidRequest
	10, // 10: echopb.GateService.UpdateGradeSystemGradeByCompanyUuid:input_type -> echopb.UpdateGradeSystemGradeByCompanyUuidRequest
	11, // 11: echopb.GateService.UpdateGradeSystemSpecializationByCompanyUuid:input_type -> echopb.UpdateGradeSystemSpecializationByCompanyUuidRequest
	12, // 12: echopb.GateService.DeleteGradeSystemCompetenceByCompanyUuid:input_type -> echopb.DeleteGradeSystemCompetenceByCompanyUuidRequest
	13, // 13: echopb.GateService.DeleteGradeSystemGradeByCompanyUuid:input_type -> echopb.DeleteGradeSystemGradeByCompanyUuidRequest
	14, // 14: echopb.GateService.DeleteGradeSystemSpecializationByCompanyUuid:input_type -> echopb.DeleteGradeSystemSpecializationByCompanyUuidRequest
	15, // 15: echopb.GateService.DeleteGradeSystemCompetenceTreeByCompanyUuid:input_type -> echopb.DeleteGradeSystemCompetenceTreeByCompanyUuidRequest
	16, // 16: echopb.GateService.GetEmployeeCardByUser:input_type -> echopb.GetEmployeeCardByUserRequest
	17, // 17: echopb.GateService.GetCompany:input_type -> echopb.GetCompanyRequest
	18, // 18: echopb.GateService.GetCompanyByUserUuid:input_type -> echopb.GetCompanyByUserUuidRequest
	19, // 19: echopb.GateService.GetCompetenceTrees:input_type -> echopb.GetCompetenceTreesRequest
	20, // 20: echopb.GateService.GetCompetenceTreeByUuid:input_type -> echopb.GetCompetenceTreeByUuidRequest
	21, // 21: echopb.GateService.CreateCompetenceTrees:input_type -> echopb.CreateCompetenceTreesRequest
	22, // 22: echopb.GateService.UpdateCompetenceTrees:input_type -> echopb.UpdateCompetenceTreesRequest
	23, // 23: echopb.GateService.DeleteCompetenceTrees:input_type -> echopb.DeleteCompetenceTreesRequest
	24, // 24: echopb.GateService.DeleteCompetenceTreeAndCompetences:input_type -> echopb.DeleteCompetenceTreeAndCompetencesRequest
	25, // 25: echopb.GateService.GetCompetences:input_type -> echopb.GetCompetencesRequest
	26, // 26: echopb.GateService.GetCompetenceByUuid:input_type -> echopb.GetCompetenceByUuidRequest
	27, // 27: echopb.GateService.CreateCompetence:input_type -> echopb.CreateCompetenceRequest
	28, // 28: echopb.GateService.UpdateCompetence:input_type -> echopb.UpdateCompetenceRequest
	29, // 29: echopb.GateService.DeleteCompetence:input_type -> echopb.DeleteCompetenceRequest
	30, // 30: echopb.GateService.GetGradeByCompanyUuidAndSpecializationUuid:output_type -> echopb.GetGradeByCompanyUuidAndSpecializationUuidResponse
	31, // 31: echopb.GateService.GetSpecializationByCompanyUuid:output_type -> echopb.GetSpecializationByCompanyUuidResponse
	32, // 32: echopb.GateService.GetSpecializationByCompanyUuidAndSpecializationUuid:output_type -> echopb.GetSpecializationByCompanyUuidAndSpecializationUuidResponse
	33, // 33: echopb.GateService.GetCompetenceByCompanyUuidAndCompetenceTreeUuid:output_type -> echopb.GetCompetenceByCompanyUuidAndCompetenceTreeResponse
	34, // 34: echopb.GateService.GetGradeSystemCompetenceTree:output_type -> echopb.GetGradeSystemCompetenceTreeResponse
	35, // 35: echopb.GateService.CreateGradeSystemCompetenceByCompanyUuid:output_type -> echopb.CreateGradeSystemCompetenceByCompanyUuidResponse
	36, // 36: echopb.GateService.CreateGradeSystemCompetenceTreeByCompanyUuid:output_type -> echopb.CreateGradeSystemCompetenceTreeByCompanyUuidResponse
	37, // 37: echopb.GateService.CreateGradeSystemGradeByCompanyUuid:output_type -> echopb.CreateGradeSystemGradeByCompanyUuidResponse
	38, // 38: echopb.GateService.CreateGradeSystemSpecializationByCompanyUuid:output_type -> echopb.CreateGradeSystemSpecializationByCompanyUuidResponse
	39, // 39: echopb.GateService.UpdateGradeSystemCompetenceByCompanyUuid:output_type -> echopb.UpdateGradeSystemCompetenceByCompanyUuidResponse
	40, // 40: echopb.GateService.UpdateGradeSystemGradeByCompanyUuid:output_type -> echopb.UpdateGradeSystemGradeByCompanyUuidResponse
	41, // 41: echopb.GateService.UpdateGradeSystemSpecializationByCompanyUuid:output_type -> echopb.UpdateGradeSystemSpecializationByCompanyUuidResponse
	42, // 42: echopb.GateService.DeleteGradeSystemCompetenceByCompanyUuid:output_type -> echopb.DeleteGradeSystemCompetenceByCompanyUuidResponse
	43, // 43: echopb.GateService.DeleteGradeSystemGradeByCompanyUuid:output_type -> echopb.DeleteGradeSystemGradeByCompanyUuidResponse
	44, // 44: echopb.GateService.DeleteGradeSystemSpecializationByCompanyUuid:output_type -> echopb.DeleteGradeSystemSpecializationByCompanyUuidResponse
	45, // 45: echopb.GateService.DeleteGradeSystemCompetenceTreeByCompanyUuid:output_type -> echopb.DeleteGradeSystemCompetenceTreeByCompanyUuidResponse
	46, // 46: echopb.GateService.GetEmployeeCardByUser:output_type -> echopb.GetEmployeeCardByUserResponse
	47, // 47: echopb.GateService.GetCompany:output_type -> echopb.GetCompanyResponse
	48, // 48: echopb.GateService.GetCompanyByUserUuid:output_type -> echopb.GetCompanyByUserUuidResponse
	49, // 49: echopb.GateService.GetCompetenceTrees:output_type -> echopb.GetCompetenceTreesResponse
	50, // 50: echopb.GateService.GetCompetenceTreeByUuid:output_type -> echopb.GetCompetenceTreeByUuidResponse
	51, // 51: echopb.GateService.CreateCompetenceTrees:output_type -> echopb.CreateCompetenceTreesResponse
	52, // 52: echopb.GateService.UpdateCompetenceTrees:output_type -> echopb.UpdateCompetenceTreesResponse
	53, // 53: echopb.GateService.DeleteCompetenceTrees:output_type -> echopb.DeleteCompetenceTreesResponse
	54, // 54: echopb.GateService.DeleteCompetenceTreeAndCompetences:output_type -> echopb.DeleteCompetenceTreeAndCompetencesResponse
	55, // 55: echopb.GateService.GetCompetences:output_type -> echopb.GetCompetencesResponse
	56, // 56: echopb.GateService.GetCompetenceByUuid:output_type -> echopb.GetCompetenceByUuidResponse
	57, // 57: echopb.GateService.CreateCompetence:output_type -> echopb.CreateCompetenceResponse
	58, // 58: echopb.GateService.UpdateCompetence:output_type -> echopb.UpdateCompetenceResponse
	59, // 59: echopb.GateService.DeleteCompetence:output_type -> echopb.DeleteCompetenceResponse
	30, // [30:60] is the sub-list for method output_type
	0,  // [0:30] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_api_gateway_service_proto_init() }
func file_api_gateway_service_proto_init() {
	if File_api_gateway_service_proto != nil {
		return
	}
	file_api_gateway_gate_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_gateway_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_gateway_service_proto_goTypes,
		DependencyIndexes: file_api_gateway_service_proto_depIdxs,
	}.Build()
	File_api_gateway_service_proto = out.File
	file_api_gateway_service_proto_rawDesc = nil
	file_api_gateway_service_proto_goTypes = nil
	file_api_gateway_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GateServiceClient is the client API for GateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GateServiceClient interface {
	//Public
	//Get all grades by company uuid and specialization uuid for specialization card
	GetGradeByCompanyUuidAndSpecializationUuid(ctx context.Context, in *GetGradeByCompanyUuidAndSpecializationUuidRequest, opts ...grpc.CallOption) (*GetGradeByCompanyUuidAndSpecializationUuidResponse, error)
	//Get Specialization specialization list by company uuid
	GetSpecializationByCompanyUuid(ctx context.Context, in *GetSpecializationByCompanyUuidRequest, opts ...grpc.CallOption) (*GetSpecializationByCompanyUuidResponse, error)
	//Get Specialization by company uuid for specialization list
	GetSpecializationByCompanyUuidAndSpecializationUuid(ctx context.Context, in *GetSpecializationByCompanyUuidAndSpecializationUuidRequest, opts ...grpc.CallOption) (*GetSpecializationByCompanyUuidAndSpecializationUuidResponse, error)
	//Get competence list by company uuid and competence tree
	GetCompetenceByCompanyUuidAndCompetenceTreeUuid(ctx context.Context, in *GetCompetenceByCompanyUuidAndCompetenceTreeRequest, opts ...grpc.CallOption) (*GetCompetenceByCompanyUuidAndCompetenceTreeResponse, error)
	// Get competence tree list
	GetGradeSystemCompetenceTree(ctx context.Context, in *GetGradeSystemCompetenceTreeRequest, opts ...grpc.CallOption) (*GetGradeSystemCompetenceTreeResponse, error)
	//Create/Update competence linked to company
	CreateGradeSystemCompetenceByCompanyUuid(ctx context.Context, in *CreateGradeSystemCompetenceByCompanyUuidRequest, opts ...grpc.CallOption) (*CreateGradeSystemCompetenceByCompanyUuidResponse, error)
	//Create/Update competence tree linked to company
	CreateGradeSystemCompetenceTreeByCompanyUuid(ctx context.Context, in *CreateGradeSystemCompetenceTreeByCompanyUuidRequest, opts ...grpc.CallOption) (*CreateGradeSystemCompetenceTreeByCompanyUuidResponse, error)
	//Create grade linked to company
	CreateGradeSystemGradeByCompanyUuid(ctx context.Context, in *CreateGradeSystemGradeByCompanyUuidRequest, opts ...grpc.CallOption) (*CreateGradeSystemGradeByCompanyUuidResponse, error)
	//Create specialization tree linked to company
	CreateGradeSystemSpecializationByCompanyUuid(ctx context.Context, in *CreateGradeSystemSpecializationByCompanyUuidRequest, opts ...grpc.CallOption) (*CreateGradeSystemSpecializationByCompanyUuidResponse, error)
	//update competence in grade system
	UpdateGradeSystemCompetenceByCompanyUuid(ctx context.Context, in *UpdateGradeSystemCompetenceByCompanyUuidRequest, opts ...grpc.CallOption) (*UpdateGradeSystemCompetenceByCompanyUuidResponse, error)
	// update grade in grade system
	UpdateGradeSystemGradeByCompanyUuid(ctx context.Context, in *UpdateGradeSystemGradeByCompanyUuidRequest, opts ...grpc.CallOption) (*UpdateGradeSystemGradeByCompanyUuidResponse, error)
	//update specialization in grade system
	UpdateGradeSystemSpecializationByCompanyUuid(ctx context.Context, in *UpdateGradeSystemSpecializationByCompanyUuidRequest, opts ...grpc.CallOption) (*UpdateGradeSystemSpecializationByCompanyUuidResponse, error)
	// remove competence from grade system
	DeleteGradeSystemCompetenceByCompanyUuid(ctx context.Context, in *DeleteGradeSystemCompetenceByCompanyUuidRequest, opts ...grpc.CallOption) (*DeleteGradeSystemCompetenceByCompanyUuidResponse, error)
	// remove grade from grade system
	DeleteGradeSystemGradeByCompanyUuid(ctx context.Context, in *DeleteGradeSystemGradeByCompanyUuidRequest, opts ...grpc.CallOption) (*DeleteGradeSystemGradeByCompanyUuidResponse, error)
	// remove specialization from grade system
	DeleteGradeSystemSpecializationByCompanyUuid(ctx context.Context, in *DeleteGradeSystemSpecializationByCompanyUuidRequest, opts ...grpc.CallOption) (*DeleteGradeSystemSpecializationByCompanyUuidResponse, error)
	// remove competence tree from grade system
	DeleteGradeSystemCompetenceTreeByCompanyUuid(ctx context.Context, in *DeleteGradeSystemCompetenceTreeByCompanyUuidRequest, opts ...grpc.CallOption) (*DeleteGradeSystemCompetenceTreeByCompanyUuidResponse, error)
	//ECS
	GetEmployeeCardByUser(ctx context.Context, in *GetEmployeeCardByUserRequest, opts ...grpc.CallOption) (*GetEmployeeCardByUserResponse, error)
	//Get All compamies
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*GetCompanyResponse, error)
	GetCompanyByUserUuid(ctx context.Context, in *GetCompanyByUserUuidRequest, opts ...grpc.CallOption) (*GetCompanyByUserUuidResponse, error)
	//Admin-Panel
	//Get competence-tree's
	GetCompetenceTrees(ctx context.Context, in *GetCompetenceTreesRequest, opts ...grpc.CallOption) (*GetCompetenceTreesResponse, error)
	//Get competence-tree's by uuid
	GetCompetenceTreeByUuid(ctx context.Context, in *GetCompetenceTreeByUuidRequest, opts ...grpc.CallOption) (*GetCompetenceTreeByUuidResponse, error)
	//Create competence-tree
	CreateCompetenceTrees(ctx context.Context, in *CreateCompetenceTreesRequest, opts ...grpc.CallOption) (*CreateCompetenceTreesResponse, error)
	//Update competence-tree
	UpdateCompetenceTrees(ctx context.Context, in *UpdateCompetenceTreesRequest, opts ...grpc.CallOption) (*UpdateCompetenceTreesResponse, error)
	//Remove competence-tree
	DeleteCompetenceTrees(ctx context.Context, in *DeleteCompetenceTreesRequest, opts ...grpc.CallOption) (*DeleteCompetenceTreesResponse, error)
	//Remove competence-tree and all competence's
	DeleteCompetenceTreeAndCompetences(ctx context.Context, in *DeleteCompetenceTreeAndCompetencesRequest, opts ...grpc.CallOption) (*DeleteCompetenceTreeAndCompetencesResponse, error)
	//получить деревья компетенций
	GetCompetences(ctx context.Context, in *GetCompetencesRequest, opts ...grpc.CallOption) (*GetCompetencesResponse, error)
	GetCompetenceByUuid(ctx context.Context, in *GetCompetenceByUuidRequest, opts ...grpc.CallOption) (*GetCompetenceByUuidResponse, error)
	//получить деревья компетенций
	CreateCompetence(ctx context.Context, in *CreateCompetenceRequest, opts ...grpc.CallOption) (*CreateCompetenceResponse, error)
	//получить деревья компетенций
	UpdateCompetence(ctx context.Context, in *UpdateCompetenceRequest, opts ...grpc.CallOption) (*UpdateCompetenceResponse, error)
	//получить деревья компетенций
	DeleteCompetence(ctx context.Context, in *DeleteCompetenceRequest, opts ...grpc.CallOption) (*DeleteCompetenceResponse, error)
}

type gateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGateServiceClient(cc grpc.ClientConnInterface) GateServiceClient {
	return &gateServiceClient{cc}
}

func (c *gateServiceClient) GetGradeByCompanyUuidAndSpecializationUuid(ctx context.Context, in *GetGradeByCompanyUuidAndSpecializationUuidRequest, opts ...grpc.CallOption) (*GetGradeByCompanyUuidAndSpecializationUuidResponse, error) {
	out := new(GetGradeByCompanyUuidAndSpecializationUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetGradeByCompanyUuidAndSpecializationUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetSpecializationByCompanyUuid(ctx context.Context, in *GetSpecializationByCompanyUuidRequest, opts ...grpc.CallOption) (*GetSpecializationByCompanyUuidResponse, error) {
	out := new(GetSpecializationByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetSpecializationByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetSpecializationByCompanyUuidAndSpecializationUuid(ctx context.Context, in *GetSpecializationByCompanyUuidAndSpecializationUuidRequest, opts ...grpc.CallOption) (*GetSpecializationByCompanyUuidAndSpecializationUuidResponse, error) {
	out := new(GetSpecializationByCompanyUuidAndSpecializationUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetSpecializationByCompanyUuidAndSpecializationUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetCompetenceByCompanyUuidAndCompetenceTreeUuid(ctx context.Context, in *GetCompetenceByCompanyUuidAndCompetenceTreeRequest, opts ...grpc.CallOption) (*GetCompetenceByCompanyUuidAndCompetenceTreeResponse, error) {
	out := new(GetCompetenceByCompanyUuidAndCompetenceTreeResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetCompetenceByCompanyUuidAndCompetenceTreeUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetGradeSystemCompetenceTree(ctx context.Context, in *GetGradeSystemCompetenceTreeRequest, opts ...grpc.CallOption) (*GetGradeSystemCompetenceTreeResponse, error) {
	out := new(GetGradeSystemCompetenceTreeResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetGradeSystemCompetenceTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CreateGradeSystemCompetenceByCompanyUuid(ctx context.Context, in *CreateGradeSystemCompetenceByCompanyUuidRequest, opts ...grpc.CallOption) (*CreateGradeSystemCompetenceByCompanyUuidResponse, error) {
	out := new(CreateGradeSystemCompetenceByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/CreateGradeSystemCompetenceByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CreateGradeSystemCompetenceTreeByCompanyUuid(ctx context.Context, in *CreateGradeSystemCompetenceTreeByCompanyUuidRequest, opts ...grpc.CallOption) (*CreateGradeSystemCompetenceTreeByCompanyUuidResponse, error) {
	out := new(CreateGradeSystemCompetenceTreeByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/CreateGradeSystemCompetenceTreeByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CreateGradeSystemGradeByCompanyUuid(ctx context.Context, in *CreateGradeSystemGradeByCompanyUuidRequest, opts ...grpc.CallOption) (*CreateGradeSystemGradeByCompanyUuidResponse, error) {
	out := new(CreateGradeSystemGradeByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/CreateGradeSystemGradeByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CreateGradeSystemSpecializationByCompanyUuid(ctx context.Context, in *CreateGradeSystemSpecializationByCompanyUuidRequest, opts ...grpc.CallOption) (*CreateGradeSystemSpecializationByCompanyUuidResponse, error) {
	out := new(CreateGradeSystemSpecializationByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/CreateGradeSystemSpecializationByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateGradeSystemCompetenceByCompanyUuid(ctx context.Context, in *UpdateGradeSystemCompetenceByCompanyUuidRequest, opts ...grpc.CallOption) (*UpdateGradeSystemCompetenceByCompanyUuidResponse, error) {
	out := new(UpdateGradeSystemCompetenceByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/UpdateGradeSystemCompetenceByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateGradeSystemGradeByCompanyUuid(ctx context.Context, in *UpdateGradeSystemGradeByCompanyUuidRequest, opts ...grpc.CallOption) (*UpdateGradeSystemGradeByCompanyUuidResponse, error) {
	out := new(UpdateGradeSystemGradeByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/UpdateGradeSystemGradeByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateGradeSystemSpecializationByCompanyUuid(ctx context.Context, in *UpdateGradeSystemSpecializationByCompanyUuidRequest, opts ...grpc.CallOption) (*UpdateGradeSystemSpecializationByCompanyUuidResponse, error) {
	out := new(UpdateGradeSystemSpecializationByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/UpdateGradeSystemSpecializationByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DeleteGradeSystemCompetenceByCompanyUuid(ctx context.Context, in *DeleteGradeSystemCompetenceByCompanyUuidRequest, opts ...grpc.CallOption) (*DeleteGradeSystemCompetenceByCompanyUuidResponse, error) {
	out := new(DeleteGradeSystemCompetenceByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/DeleteGradeSystemCompetenceByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DeleteGradeSystemGradeByCompanyUuid(ctx context.Context, in *DeleteGradeSystemGradeByCompanyUuidRequest, opts ...grpc.CallOption) (*DeleteGradeSystemGradeByCompanyUuidResponse, error) {
	out := new(DeleteGradeSystemGradeByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/DeleteGradeSystemGradeByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DeleteGradeSystemSpecializationByCompanyUuid(ctx context.Context, in *DeleteGradeSystemSpecializationByCompanyUuidRequest, opts ...grpc.CallOption) (*DeleteGradeSystemSpecializationByCompanyUuidResponse, error) {
	out := new(DeleteGradeSystemSpecializationByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/DeleteGradeSystemSpecializationByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DeleteGradeSystemCompetenceTreeByCompanyUuid(ctx context.Context, in *DeleteGradeSystemCompetenceTreeByCompanyUuidRequest, opts ...grpc.CallOption) (*DeleteGradeSystemCompetenceTreeByCompanyUuidResponse, error) {
	out := new(DeleteGradeSystemCompetenceTreeByCompanyUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/DeleteGradeSystemCompetenceTreeByCompanyUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetEmployeeCardByUser(ctx context.Context, in *GetEmployeeCardByUserRequest, opts ...grpc.CallOption) (*GetEmployeeCardByUserResponse, error) {
	out := new(GetEmployeeCardByUserResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetEmployeeCardByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*GetCompanyResponse, error) {
	out := new(GetCompanyResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetCompanyByUserUuid(ctx context.Context, in *GetCompanyByUserUuidRequest, opts ...grpc.CallOption) (*GetCompanyByUserUuidResponse, error) {
	out := new(GetCompanyByUserUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetCompanyByUserUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetCompetenceTrees(ctx context.Context, in *GetCompetenceTreesRequest, opts ...grpc.CallOption) (*GetCompetenceTreesResponse, error) {
	out := new(GetCompetenceTreesResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetCompetenceTrees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetCompetenceTreeByUuid(ctx context.Context, in *GetCompetenceTreeByUuidRequest, opts ...grpc.CallOption) (*GetCompetenceTreeByUuidResponse, error) {
	out := new(GetCompetenceTreeByUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetCompetenceTreeByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CreateCompetenceTrees(ctx context.Context, in *CreateCompetenceTreesRequest, opts ...grpc.CallOption) (*CreateCompetenceTreesResponse, error) {
	out := new(CreateCompetenceTreesResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/CreateCompetenceTrees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateCompetenceTrees(ctx context.Context, in *UpdateCompetenceTreesRequest, opts ...grpc.CallOption) (*UpdateCompetenceTreesResponse, error) {
	out := new(UpdateCompetenceTreesResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/UpdateCompetenceTrees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DeleteCompetenceTrees(ctx context.Context, in *DeleteCompetenceTreesRequest, opts ...grpc.CallOption) (*DeleteCompetenceTreesResponse, error) {
	out := new(DeleteCompetenceTreesResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/DeleteCompetenceTrees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DeleteCompetenceTreeAndCompetences(ctx context.Context, in *DeleteCompetenceTreeAndCompetencesRequest, opts ...grpc.CallOption) (*DeleteCompetenceTreeAndCompetencesResponse, error) {
	out := new(DeleteCompetenceTreeAndCompetencesResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/DeleteCompetenceTreeAndCompetences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetCompetences(ctx context.Context, in *GetCompetencesRequest, opts ...grpc.CallOption) (*GetCompetencesResponse, error) {
	out := new(GetCompetencesResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetCompetences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) GetCompetenceByUuid(ctx context.Context, in *GetCompetenceByUuidRequest, opts ...grpc.CallOption) (*GetCompetenceByUuidResponse, error) {
	out := new(GetCompetenceByUuidResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/GetCompetenceByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) CreateCompetence(ctx context.Context, in *CreateCompetenceRequest, opts ...grpc.CallOption) (*CreateCompetenceResponse, error) {
	out := new(CreateCompetenceResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/CreateCompetence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) UpdateCompetence(ctx context.Context, in *UpdateCompetenceRequest, opts ...grpc.CallOption) (*UpdateCompetenceResponse, error) {
	out := new(UpdateCompetenceResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/UpdateCompetence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) DeleteCompetence(ctx context.Context, in *DeleteCompetenceRequest, opts ...grpc.CallOption) (*DeleteCompetenceResponse, error) {
	out := new(DeleteCompetenceResponse)
	err := c.cc.Invoke(ctx, "/echopb.GateService/DeleteCompetence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateServiceServer is the server API for GateService service.
type GateServiceServer interface {
	//Public
	//Get all grades by company uuid and specialization uuid for specialization card
	GetGradeByCompanyUuidAndSpecializationUuid(context.Context, *GetGradeByCompanyUuidAndSpecializationUuidRequest) (*GetGradeByCompanyUuidAndSpecializationUuidResponse, error)
	//Get Specialization specialization list by company uuid
	GetSpecializationByCompanyUuid(context.Context, *GetSpecializationByCompanyUuidRequest) (*GetSpecializationByCompanyUuidResponse, error)
	//Get Specialization by company uuid for specialization list
	GetSpecializationByCompanyUuidAndSpecializationUuid(context.Context, *GetSpecializationByCompanyUuidAndSpecializationUuidRequest) (*GetSpecializationByCompanyUuidAndSpecializationUuidResponse, error)
	//Get competence list by company uuid and competence tree
	GetCompetenceByCompanyUuidAndCompetenceTreeUuid(context.Context, *GetCompetenceByCompanyUuidAndCompetenceTreeRequest) (*GetCompetenceByCompanyUuidAndCompetenceTreeResponse, error)
	// Get competence tree list
	GetGradeSystemCompetenceTree(context.Context, *GetGradeSystemCompetenceTreeRequest) (*GetGradeSystemCompetenceTreeResponse, error)
	//Create/Update competence linked to company
	CreateGradeSystemCompetenceByCompanyUuid(context.Context, *CreateGradeSystemCompetenceByCompanyUuidRequest) (*CreateGradeSystemCompetenceByCompanyUuidResponse, error)
	//Create/Update competence tree linked to company
	CreateGradeSystemCompetenceTreeByCompanyUuid(context.Context, *CreateGradeSystemCompetenceTreeByCompanyUuidRequest) (*CreateGradeSystemCompetenceTreeByCompanyUuidResponse, error)
	//Create grade linked to company
	CreateGradeSystemGradeByCompanyUuid(context.Context, *CreateGradeSystemGradeByCompanyUuidRequest) (*CreateGradeSystemGradeByCompanyUuidResponse, error)
	//Create specialization tree linked to company
	CreateGradeSystemSpecializationByCompanyUuid(context.Context, *CreateGradeSystemSpecializationByCompanyUuidRequest) (*CreateGradeSystemSpecializationByCompanyUuidResponse, error)
	//update competence in grade system
	UpdateGradeSystemCompetenceByCompanyUuid(context.Context, *UpdateGradeSystemCompetenceByCompanyUuidRequest) (*UpdateGradeSystemCompetenceByCompanyUuidResponse, error)
	// update grade in grade system
	UpdateGradeSystemGradeByCompanyUuid(context.Context, *UpdateGradeSystemGradeByCompanyUuidRequest) (*UpdateGradeSystemGradeByCompanyUuidResponse, error)
	//update specialization in grade system
	UpdateGradeSystemSpecializationByCompanyUuid(context.Context, *UpdateGradeSystemSpecializationByCompanyUuidRequest) (*UpdateGradeSystemSpecializationByCompanyUuidResponse, error)
	// remove competence from grade system
	DeleteGradeSystemCompetenceByCompanyUuid(context.Context, *DeleteGradeSystemCompetenceByCompanyUuidRequest) (*DeleteGradeSystemCompetenceByCompanyUuidResponse, error)
	// remove grade from grade system
	DeleteGradeSystemGradeByCompanyUuid(context.Context, *DeleteGradeSystemGradeByCompanyUuidRequest) (*DeleteGradeSystemGradeByCompanyUuidResponse, error)
	// remove specialization from grade system
	DeleteGradeSystemSpecializationByCompanyUuid(context.Context, *DeleteGradeSystemSpecializationByCompanyUuidRequest) (*DeleteGradeSystemSpecializationByCompanyUuidResponse, error)
	// remove competence tree from grade system
	DeleteGradeSystemCompetenceTreeByCompanyUuid(context.Context, *DeleteGradeSystemCompetenceTreeByCompanyUuidRequest) (*DeleteGradeSystemCompetenceTreeByCompanyUuidResponse, error)
	//ECS
	GetEmployeeCardByUser(context.Context, *GetEmployeeCardByUserRequest) (*GetEmployeeCardByUserResponse, error)
	//Get All compamies
	GetCompany(context.Context, *GetCompanyRequest) (*GetCompanyResponse, error)
	GetCompanyByUserUuid(context.Context, *GetCompanyByUserUuidRequest) (*GetCompanyByUserUuidResponse, error)
	//Admin-Panel
	//Get competence-tree's
	GetCompetenceTrees(context.Context, *GetCompetenceTreesRequest) (*GetCompetenceTreesResponse, error)
	//Get competence-tree's by uuid
	GetCompetenceTreeByUuid(context.Context, *GetCompetenceTreeByUuidRequest) (*GetCompetenceTreeByUuidResponse, error)
	//Create competence-tree
	CreateCompetenceTrees(context.Context, *CreateCompetenceTreesRequest) (*CreateCompetenceTreesResponse, error)
	//Update competence-tree
	UpdateCompetenceTrees(context.Context, *UpdateCompetenceTreesRequest) (*UpdateCompetenceTreesResponse, error)
	//Remove competence-tree
	DeleteCompetenceTrees(context.Context, *DeleteCompetenceTreesRequest) (*DeleteCompetenceTreesResponse, error)
	//Remove competence-tree and all competence's
	DeleteCompetenceTreeAndCompetences(context.Context, *DeleteCompetenceTreeAndCompetencesRequest) (*DeleteCompetenceTreeAndCompetencesResponse, error)
	//получить деревья компетенций
	GetCompetences(context.Context, *GetCompetencesRequest) (*GetCompetencesResponse, error)
	GetCompetenceByUuid(context.Context, *GetCompetenceByUuidRequest) (*GetCompetenceByUuidResponse, error)
	//получить деревья компетенций
	CreateCompetence(context.Context, *CreateCompetenceRequest) (*CreateCompetenceResponse, error)
	//получить деревья компетенций
	UpdateCompetence(context.Context, *UpdateCompetenceRequest) (*UpdateCompetenceResponse, error)
	//получить деревья компетенций
	DeleteCompetence(context.Context, *DeleteCompetenceRequest) (*DeleteCompetenceResponse, error)
}

// UnimplementedGateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGateServiceServer struct {
}

func (*UnimplementedGateServiceServer) GetGradeByCompanyUuidAndSpecializationUuid(context.Context, *GetGradeByCompanyUuidAndSpecializationUuidRequest) (*GetGradeByCompanyUuidAndSpecializationUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeByCompanyUuidAndSpecializationUuid not implemented")
}
func (*UnimplementedGateServiceServer) GetSpecializationByCompanyUuid(context.Context, *GetSpecializationByCompanyUuidRequest) (*GetSpecializationByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecializationByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) GetSpecializationByCompanyUuidAndSpecializationUuid(context.Context, *GetSpecializationByCompanyUuidAndSpecializationUuidRequest) (*GetSpecializationByCompanyUuidAndSpecializationUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecializationByCompanyUuidAndSpecializationUuid not implemented")
}
func (*UnimplementedGateServiceServer) GetCompetenceByCompanyUuidAndCompetenceTreeUuid(context.Context, *GetCompetenceByCompanyUuidAndCompetenceTreeRequest) (*GetCompetenceByCompanyUuidAndCompetenceTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetenceByCompanyUuidAndCompetenceTreeUuid not implemented")
}
func (*UnimplementedGateServiceServer) GetGradeSystemCompetenceTree(context.Context, *GetGradeSystemCompetenceTreeRequest) (*GetGradeSystemCompetenceTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeSystemCompetenceTree not implemented")
}
func (*UnimplementedGateServiceServer) CreateGradeSystemCompetenceByCompanyUuid(context.Context, *CreateGradeSystemCompetenceByCompanyUuidRequest) (*CreateGradeSystemCompetenceByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGradeSystemCompetenceByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) CreateGradeSystemCompetenceTreeByCompanyUuid(context.Context, *CreateGradeSystemCompetenceTreeByCompanyUuidRequest) (*CreateGradeSystemCompetenceTreeByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGradeSystemCompetenceTreeByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) CreateGradeSystemGradeByCompanyUuid(context.Context, *CreateGradeSystemGradeByCompanyUuidRequest) (*CreateGradeSystemGradeByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGradeSystemGradeByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) CreateGradeSystemSpecializationByCompanyUuid(context.Context, *CreateGradeSystemSpecializationByCompanyUuidRequest) (*CreateGradeSystemSpecializationByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGradeSystemSpecializationByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) UpdateGradeSystemCompetenceByCompanyUuid(context.Context, *UpdateGradeSystemCompetenceByCompanyUuidRequest) (*UpdateGradeSystemCompetenceByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGradeSystemCompetenceByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) UpdateGradeSystemGradeByCompanyUuid(context.Context, *UpdateGradeSystemGradeByCompanyUuidRequest) (*UpdateGradeSystemGradeByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGradeSystemGradeByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) UpdateGradeSystemSpecializationByCompanyUuid(context.Context, *UpdateGradeSystemSpecializationByCompanyUuidRequest) (*UpdateGradeSystemSpecializationByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGradeSystemSpecializationByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) DeleteGradeSystemCompetenceByCompanyUuid(context.Context, *DeleteGradeSystemCompetenceByCompanyUuidRequest) (*DeleteGradeSystemCompetenceByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGradeSystemCompetenceByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) DeleteGradeSystemGradeByCompanyUuid(context.Context, *DeleteGradeSystemGradeByCompanyUuidRequest) (*DeleteGradeSystemGradeByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGradeSystemGradeByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) DeleteGradeSystemSpecializationByCompanyUuid(context.Context, *DeleteGradeSystemSpecializationByCompanyUuidRequest) (*DeleteGradeSystemSpecializationByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGradeSystemSpecializationByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) DeleteGradeSystemCompetenceTreeByCompanyUuid(context.Context, *DeleteGradeSystemCompetenceTreeByCompanyUuidRequest) (*DeleteGradeSystemCompetenceTreeByCompanyUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGradeSystemCompetenceTreeByCompanyUuid not implemented")
}
func (*UnimplementedGateServiceServer) GetEmployeeCardByUser(context.Context, *GetEmployeeCardByUserRequest) (*GetEmployeeCardByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeCardByUser not implemented")
}
func (*UnimplementedGateServiceServer) GetCompany(context.Context, *GetCompanyRequest) (*GetCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (*UnimplementedGateServiceServer) GetCompanyByUserUuid(context.Context, *GetCompanyByUserUuidRequest) (*GetCompanyByUserUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyByUserUuid not implemented")
}
func (*UnimplementedGateServiceServer) GetCompetenceTrees(context.Context, *GetCompetenceTreesRequest) (*GetCompetenceTreesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetenceTrees not implemented")
}
func (*UnimplementedGateServiceServer) GetCompetenceTreeByUuid(context.Context, *GetCompetenceTreeByUuidRequest) (*GetCompetenceTreeByUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetenceTreeByUuid not implemented")
}
func (*UnimplementedGateServiceServer) CreateCompetenceTrees(context.Context, *CreateCompetenceTreesRequest) (*CreateCompetenceTreesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompetenceTrees not implemented")
}
func (*UnimplementedGateServiceServer) UpdateCompetenceTrees(context.Context, *UpdateCompetenceTreesRequest) (*UpdateCompetenceTreesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompetenceTrees not implemented")
}
func (*UnimplementedGateServiceServer) DeleteCompetenceTrees(context.Context, *DeleteCompetenceTreesRequest) (*DeleteCompetenceTreesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompetenceTrees not implemented")
}
func (*UnimplementedGateServiceServer) DeleteCompetenceTreeAndCompetences(context.Context, *DeleteCompetenceTreeAndCompetencesRequest) (*DeleteCompetenceTreeAndCompetencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompetenceTreeAndCompetences not implemented")
}
func (*UnimplementedGateServiceServer) GetCompetences(context.Context, *GetCompetencesRequest) (*GetCompetencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetences not implemented")
}
func (*UnimplementedGateServiceServer) GetCompetenceByUuid(context.Context, *GetCompetenceByUuidRequest) (*GetCompetenceByUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetenceByUuid not implemented")
}
func (*UnimplementedGateServiceServer) CreateCompetence(context.Context, *CreateCompetenceRequest) (*CreateCompetenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompetence not implemented")
}
func (*UnimplementedGateServiceServer) UpdateCompetence(context.Context, *UpdateCompetenceRequest) (*UpdateCompetenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompetence not implemented")
}
func (*UnimplementedGateServiceServer) DeleteCompetence(context.Context, *DeleteCompetenceRequest) (*DeleteCompetenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompetence not implemented")
}

func RegisterGateServiceServer(s *grpc.Server, srv GateServiceServer) {
	s.RegisterService(&_GateService_serviceDesc, srv)
}

func _GateService_GetGradeByCompanyUuidAndSpecializationUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeByCompanyUuidAndSpecializationUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetGradeByCompanyUuidAndSpecializationUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetGradeByCompanyUuidAndSpecializationUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetGradeByCompanyUuidAndSpecializationUuid(ctx, req.(*GetGradeByCompanyUuidAndSpecializationUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetSpecializationByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecializationByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetSpecializationByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetSpecializationByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetSpecializationByCompanyUuid(ctx, req.(*GetSpecializationByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetSpecializationByCompanyUuidAndSpecializationUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecializationByCompanyUuidAndSpecializationUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetSpecializationByCompanyUuidAndSpecializationUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetSpecializationByCompanyUuidAndSpecializationUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetSpecializationByCompanyUuidAndSpecializationUuid(ctx, req.(*GetSpecializationByCompanyUuidAndSpecializationUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetCompetenceByCompanyUuidAndCompetenceTreeUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompetenceByCompanyUuidAndCompetenceTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetCompetenceByCompanyUuidAndCompetenceTreeUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetCompetenceByCompanyUuidAndCompetenceTreeUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetCompetenceByCompanyUuidAndCompetenceTreeUuid(ctx, req.(*GetCompetenceByCompanyUuidAndCompetenceTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetGradeSystemCompetenceTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeSystemCompetenceTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetGradeSystemCompetenceTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetGradeSystemCompetenceTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetGradeSystemCompetenceTree(ctx, req.(*GetGradeSystemCompetenceTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CreateGradeSystemCompetenceByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGradeSystemCompetenceByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CreateGradeSystemCompetenceByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/CreateGradeSystemCompetenceByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CreateGradeSystemCompetenceByCompanyUuid(ctx, req.(*CreateGradeSystemCompetenceByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CreateGradeSystemCompetenceTreeByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGradeSystemCompetenceTreeByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CreateGradeSystemCompetenceTreeByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/CreateGradeSystemCompetenceTreeByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CreateGradeSystemCompetenceTreeByCompanyUuid(ctx, req.(*CreateGradeSystemCompetenceTreeByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CreateGradeSystemGradeByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGradeSystemGradeByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CreateGradeSystemGradeByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/CreateGradeSystemGradeByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CreateGradeSystemGradeByCompanyUuid(ctx, req.(*CreateGradeSystemGradeByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CreateGradeSystemSpecializationByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGradeSystemSpecializationByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CreateGradeSystemSpecializationByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/CreateGradeSystemSpecializationByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CreateGradeSystemSpecializationByCompanyUuid(ctx, req.(*CreateGradeSystemSpecializationByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateGradeSystemCompetenceByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGradeSystemCompetenceByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateGradeSystemCompetenceByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/UpdateGradeSystemCompetenceByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateGradeSystemCompetenceByCompanyUuid(ctx, req.(*UpdateGradeSystemCompetenceByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateGradeSystemGradeByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGradeSystemGradeByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateGradeSystemGradeByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/UpdateGradeSystemGradeByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateGradeSystemGradeByCompanyUuid(ctx, req.(*UpdateGradeSystemGradeByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateGradeSystemSpecializationByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGradeSystemSpecializationByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateGradeSystemSpecializationByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/UpdateGradeSystemSpecializationByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateGradeSystemSpecializationByCompanyUuid(ctx, req.(*UpdateGradeSystemSpecializationByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DeleteGradeSystemCompetenceByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGradeSystemCompetenceByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DeleteGradeSystemCompetenceByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/DeleteGradeSystemCompetenceByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DeleteGradeSystemCompetenceByCompanyUuid(ctx, req.(*DeleteGradeSystemCompetenceByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DeleteGradeSystemGradeByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGradeSystemGradeByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DeleteGradeSystemGradeByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/DeleteGradeSystemGradeByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DeleteGradeSystemGradeByCompanyUuid(ctx, req.(*DeleteGradeSystemGradeByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DeleteGradeSystemSpecializationByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGradeSystemSpecializationByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DeleteGradeSystemSpecializationByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/DeleteGradeSystemSpecializationByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DeleteGradeSystemSpecializationByCompanyUuid(ctx, req.(*DeleteGradeSystemSpecializationByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DeleteGradeSystemCompetenceTreeByCompanyUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGradeSystemCompetenceTreeByCompanyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DeleteGradeSystemCompetenceTreeByCompanyUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/DeleteGradeSystemCompetenceTreeByCompanyUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DeleteGradeSystemCompetenceTreeByCompanyUuid(ctx, req.(*DeleteGradeSystemCompetenceTreeByCompanyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetEmployeeCardByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeCardByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetEmployeeCardByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetEmployeeCardByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetEmployeeCardByUser(ctx, req.(*GetEmployeeCardByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetCompany(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetCompanyByUserUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyByUserUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetCompanyByUserUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetCompanyByUserUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetCompanyByUserUuid(ctx, req.(*GetCompanyByUserUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetCompetenceTrees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompetenceTreesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetCompetenceTrees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetCompetenceTrees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetCompetenceTrees(ctx, req.(*GetCompetenceTreesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetCompetenceTreeByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompetenceTreeByUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetCompetenceTreeByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetCompetenceTreeByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetCompetenceTreeByUuid(ctx, req.(*GetCompetenceTreeByUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CreateCompetenceTrees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompetenceTreesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CreateCompetenceTrees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/CreateCompetenceTrees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CreateCompetenceTrees(ctx, req.(*CreateCompetenceTreesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateCompetenceTrees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompetenceTreesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateCompetenceTrees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/UpdateCompetenceTrees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateCompetenceTrees(ctx, req.(*UpdateCompetenceTreesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DeleteCompetenceTrees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompetenceTreesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DeleteCompetenceTrees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/DeleteCompetenceTrees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DeleteCompetenceTrees(ctx, req.(*DeleteCompetenceTreesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DeleteCompetenceTreeAndCompetences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompetenceTreeAndCompetencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DeleteCompetenceTreeAndCompetences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/DeleteCompetenceTreeAndCompetences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DeleteCompetenceTreeAndCompetences(ctx, req.(*DeleteCompetenceTreeAndCompetencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetCompetences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompetencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetCompetences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetCompetences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetCompetences(ctx, req.(*GetCompetencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_GetCompetenceByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompetenceByUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).GetCompetenceByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/GetCompetenceByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).GetCompetenceByUuid(ctx, req.(*GetCompetenceByUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_CreateCompetence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompetenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).CreateCompetence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/CreateCompetence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).CreateCompetence(ctx, req.(*CreateCompetenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_UpdateCompetence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompetenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).UpdateCompetence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/UpdateCompetence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).UpdateCompetence(ctx, req.(*UpdateCompetenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_DeleteCompetence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompetenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).DeleteCompetence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.GateService/DeleteCompetence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).DeleteCompetence(ctx, req.(*DeleteCompetenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echopb.GateService",
	HandlerType: (*GateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGradeByCompanyUuidAndSpecializationUuid",
			Handler:    _GateService_GetGradeByCompanyUuidAndSpecializationUuid_Handler,
		},
		{
			MethodName: "GetSpecializationByCompanyUuid",
			Handler:    _GateService_GetSpecializationByCompanyUuid_Handler,
		},
		{
			MethodName: "GetSpecializationByCompanyUuidAndSpecializationUuid",
			Handler:    _GateService_GetSpecializationByCompanyUuidAndSpecializationUuid_Handler,
		},
		{
			MethodName: "GetCompetenceByCompanyUuidAndCompetenceTreeUuid",
			Handler:    _GateService_GetCompetenceByCompanyUuidAndCompetenceTreeUuid_Handler,
		},
		{
			MethodName: "GetGradeSystemCompetenceTree",
			Handler:    _GateService_GetGradeSystemCompetenceTree_Handler,
		},
		{
			MethodName: "CreateGradeSystemCompetenceByCompanyUuid",
			Handler:    _GateService_CreateGradeSystemCompetenceByCompanyUuid_Handler,
		},
		{
			MethodName: "CreateGradeSystemCompetenceTreeByCompanyUuid",
			Handler:    _GateService_CreateGradeSystemCompetenceTreeByCompanyUuid_Handler,
		},
		{
			MethodName: "CreateGradeSystemGradeByCompanyUuid",
			Handler:    _GateService_CreateGradeSystemGradeByCompanyUuid_Handler,
		},
		{
			MethodName: "CreateGradeSystemSpecializationByCompanyUuid",
			Handler:    _GateService_CreateGradeSystemSpecializationByCompanyUuid_Handler,
		},
		{
			MethodName: "UpdateGradeSystemCompetenceByCompanyUuid",
			Handler:    _GateService_UpdateGradeSystemCompetenceByCompanyUuid_Handler,
		},
		{
			MethodName: "UpdateGradeSystemGradeByCompanyUuid",
			Handler:    _GateService_UpdateGradeSystemGradeByCompanyUuid_Handler,
		},
		{
			MethodName: "UpdateGradeSystemSpecializationByCompanyUuid",
			Handler:    _GateService_UpdateGradeSystemSpecializationByCompanyUuid_Handler,
		},
		{
			MethodName: "DeleteGradeSystemCompetenceByCompanyUuid",
			Handler:    _GateService_DeleteGradeSystemCompetenceByCompanyUuid_Handler,
		},
		{
			MethodName: "DeleteGradeSystemGradeByCompanyUuid",
			Handler:    _GateService_DeleteGradeSystemGradeByCompanyUuid_Handler,
		},
		{
			MethodName: "DeleteGradeSystemSpecializationByCompanyUuid",
			Handler:    _GateService_DeleteGradeSystemSpecializationByCompanyUuid_Handler,
		},
		{
			MethodName: "DeleteGradeSystemCompetenceTreeByCompanyUuid",
			Handler:    _GateService_DeleteGradeSystemCompetenceTreeByCompanyUuid_Handler,
		},
		{
			MethodName: "GetEmployeeCardByUser",
			Handler:    _GateService_GetEmployeeCardByUser_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _GateService_GetCompany_Handler,
		},
		{
			MethodName: "GetCompanyByUserUuid",
			Handler:    _GateService_GetCompanyByUserUuid_Handler,
		},
		{
			MethodName: "GetCompetenceTrees",
			Handler:    _GateService_GetCompetenceTrees_Handler,
		},
		{
			MethodName: "GetCompetenceTreeByUuid",
			Handler:    _GateService_GetCompetenceTreeByUuid_Handler,
		},
		{
			MethodName: "CreateCompetenceTrees",
			Handler:    _GateService_CreateCompetenceTrees_Handler,
		},
		{
			MethodName: "UpdateCompetenceTrees",
			Handler:    _GateService_UpdateCompetenceTrees_Handler,
		},
		{
			MethodName: "DeleteCompetenceTrees",
			Handler:    _GateService_DeleteCompetenceTrees_Handler,
		},
		{
			MethodName: "DeleteCompetenceTreeAndCompetences",
			Handler:    _GateService_DeleteCompetenceTreeAndCompetences_Handler,
		},
		{
			MethodName: "GetCompetences",
			Handler:    _GateService_GetCompetences_Handler,
		},
		{
			MethodName: "GetCompetenceByUuid",
			Handler:    _GateService_GetCompetenceByUuid_Handler,
		},
		{
			MethodName: "CreateCompetence",
			Handler:    _GateService_CreateCompetence_Handler,
		},
		{
			MethodName: "UpdateCompetence",
			Handler:    _GateService_UpdateCompetence_Handler,
		},
		{
			MethodName: "DeleteCompetence",
			Handler:    _GateService_DeleteCompetence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api-gateway-service.proto",
}
